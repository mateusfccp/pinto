<identifier> ::= <identifier_start> <identifier_part>*

<identifier_start> ::= [A-Za-z_$]
<identifier_part> ::= <identifier_start>  | <digit>

<digit> ::= [0-9]

<program> ::= <import>* <non_import_declaration>*

<import> ::= "import" ( <dart_import> |  <package_import> )
<dart_import> ::= "@" <import_identifier>
<package_import> ::= <import_identifier>
<import_identifier> ::= <identifier> ( "/" <identifier> )*

<non_import_declaration> ::= <type_definition>
			   | <let_function_declaration>
                           | <let_variable_declaration>

<type_definition> ::= "type" <identifier> ( "(" <named_type_literal> ( "," <named_type_literal> )* ")" )? "=" <type_variation> ( "+" <type_variation> )*
<type_variant> ::= <identifier> ( "(" <type_variant_parameter> ( "," <type_variant_parameter> )* ")" )?
<type_variant_parameter> ::= <type_literal> <identifier>

<let_function_declaration> ::= "let" <identifier> <struct_literal> "=" <expression>
<let_variable_declaration> ::= "let" <identifier> "=" <expression>

<type_literal> ::= <top_type_literal>
		 | <bottom_type_literal>
		 | <list_type_literal>
                 | <set_type_literal>
		 | <map_type_literal>
		 | <named_type_literal>
		 | <option_type_literal>

<top_type_literal> ::= "⊤"
<bottom_type_literal> ::= "⊥"
<list_type_literal> ::= "[" <type_literal> "]"
<set_type_literal> ::= "{" <type_literal> "}"
<map_type_literal> ::= "{" <type_literal> ":" <type_literal> "}"
<identified_type_literal> ::= <identifier> ( "(" <type_literal> ( "," <type_literal> )* ")" )?
<option_type_literal> ::= <type_literal> "?"

<digit_separator> ::= "_"
<string_character> ::= ~( '"' | '\n' | '\r')

<expression> ::= <bool_literal>
	       | <integer_literal>
	       | <string_literal>
	       | <struct_literal>
	       | <symbol_literal>
	       | <unit_literal>
	       | <identifier>

<bool_literal> ::= "true" | "false"
<double_literal>  ::= <integer_literal> "." <integer_literal>
<integer_literal> ::= <digit> (<digit_separator>* <digit>+)*
<struct_literal> ::= "(" (<symbol_literal>? <expression>? ",")* ")"
<string_literal> ::= '"' + <string_character>* + '"'
<symbol_literal> ::= ":" <identifier>
<unit_literal> ::= "()"
